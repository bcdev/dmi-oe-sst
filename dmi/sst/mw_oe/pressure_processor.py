import numpy as np

from dmi.sst.util.default_data import DefaultData


class PressureProcessor:
    A_COEFFS = np.float32(np.array([0.000000, 20.000000, 38.425343, 63.647804, 95.636963, 134.483307, 180.584351, 234.779053, 298.495789, 373.971924, 464.618134, 575.651001, 713.218079, 883.660522, 1094.834717,
                1356.474609, 1680.640259, 2082.273926, 2579.888672, 3196.421631, 3960.291504, 4906.708496, 6018.019531, 7306.631348, 8765.053711, 10376.126953, 12077.446289, 13775.325195,
                15379.805664, 16819.474609, 18045.183594, 19027.695313, 19755.109375, 20222.205078, 20429.863281, 20384.480469, 20097.402344, 19584.330078, 18864.750000, 17961.357422, 16899.468750,
                15706.447266, 14411.124023, 13043.218750, 11632.758789, 10209.500977, 8802.356445, 7438.803223, 6144.314941, 4941.778320, 3850.913330, 2887.696533, 2063.779785, 1385.912598,
                855.361755, 467.333588, 210.393890, 65.889244, 7.367743, 0.000000, 0.000000]))

    B_COEFFS = np.float32(np.array([0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000076, 0.000461, 0.001815, 0.005081, 0.011143, 0.020678, 0.034121, 0.051690, 0.073534, 0.099675, 0.130023, 0.164384,
                0.202476, 0.243933, 0.288323, 0.335155, 0.383892, 0.433963, 0.484772, 0.535710, 0.586168, 0.635547, 0.683269, 0.728786, 0.771597, 0.811253, 0.847375, 0.879657, 0.907884, 0.931940,
                0.951822, 0.967645, 0.979663, 0.988270, 0.994019, 0.997630, 1.000000]))

    # A_COEFFS_INT = np.array([10.00000000, 29.21267150, 51.03657350, 79.64238350, 115.06013500, 157.53382900, 207.68170200, 266.63742100, 336.23385650, 419.29502900, 520.13456750, 644.43454000, 798.43930050,
    #                 989.24761950, 1225.65466300, 1518.55743400, 1881.45709250, 2331.08129900, 2888.15515150, 3578.35656750, 4433.50000000, 5462.36401350, 6662.32543950, 8035.84252950, 9570.59033200,
    #                 11226.78662100, 12926.38574200, 14577.56542950, 16099.64013650, 17432.32910150, 18536.43945350, 19391.40234400, 19988.65722650, 20326.03417950, 20407.17187500, 20240.94140650,
    #                 19840.86621100, 19224.54003900, 18413.05371100, 17430.41308600, 16302.95800800, 15058.78564450, 13727.17138650, 12337.98876950, 10921.12988300, 9505.92871100, 8120.57983400,
    #                 6791.55908200, 5543.04663050, 4396.34582500, 3369.30493150, 2475.73815900, 1724.84619150, 1120.63717650, 661.34767150, 338.86373900, 138.14156700, 36.62849350, 3.68387150,
    #                 0.00000000])
    #
    # B_COEFFS_INT = np.array([0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,
    #                 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00003800, 0.00026850, 0.00113800, 0.00344800, 0.00811200, 0.01591050, 0.02739950,
    #                 0.04290550, 0.06261200, 0.08660450, 0.11484900, 0.14720350, 0.18343000, 0.22320450, 0.26612800, 0.31173900, 0.35952350, 0.40892750, 0.45936750, 0.51024100, 0.56093900, 0.61085750,
    #                 0.65940800, 0.70602750, 0.75019150, 0.79142500, 0.82931400, 0.86351600, 0.89377050, 0.91991200, 0.94188100, 0.95973350, 0.97365400, 0.98396650, 0.99114450, 0.99582450, 0.99881500])

    def calculate_pressure_levels(self, sea_level_pressure):
        num_levels = len(self.A_COEFFS) - 1
        num_measures = len(sea_level_pressure)

        target_data = DefaultData.create_default_array(num_levels, num_measures, np.float32, fill_value=np.NaN)
        for i in range(0, num_measures):
            # p_h = np.float64(sea_level_pressure[i]) * self.B_COEFFS_INT + self.A_COEFFS_INT
            p_f = np.float32(sea_level_pressure[i]) * self.B_COEFFS + self.A_COEFFS
            target_data[i, :] = p_f[1:61] - p_f[0:60]
        return target_data
